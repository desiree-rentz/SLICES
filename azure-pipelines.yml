#variables:
#- name: VM_SERVER
#  value: 'sopnode-w2-multipass'

# trigger:
# - main

# pool:
#   vmImage: ubuntu-latest

# Build a Docker image
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

# trigger:
# - develop
## Use this for scheduled runs; you can also do it from the interface with triggers, click on the":" next to save
# schedules:
# - cron: '0 0 * * *'
#   displayName: Daily midnight build
#   branches:
#     include:
#     - main
trigger:
- none

pool:
 name: Default
 #name: Azure Pipelines
 
resources:
- repo: self

stages:
- stage: Blueprint_Deployment
  displayName: blueprint Deployment
  jobs:
  - job: Build
    displayName: Ubuntu 22.04 Deployment
    pool:
      name: Default

    steps:

    #  Create VMs
    - task: SSH@0
      displayName: 'Launch Multipass VMs'
      continueOnError: true
      inputs:
        sshEndpoint: $(VM_SERVER)
        runOptions: 'commands'
        commands: |
          multipass launch --cloud-init azurevm-init.yaml --cpus 4 --disk 40G --memory 16G --name leftclient
          multipass launch --cloud-init azurevm-init.yaml --cpus 4 --disk 40G --memory 16G --name rightclient
          multipass launch --cloud-init azurevm-init.yaml --cpus 4 --disk 40G --memory 16G --name leftswitch
        readyTimeout: '20000'
    # Fetch IP@ of VMs to be used in ansible hosts files
    - task: SSH@0
      displayName: 'Fetch IP@ of VMs'
      inputs:
        sshEndpoint: $(VM_SERVER)
        runOptions: 'commands'
        commands: |
          multipass info leftclient --format json | jq -r '.info.leftclient.ipv4[0]' > vm.txt
          multipass info rightclient --format json | jq -r '.info.rightclient.ipv4[0]' >> vm.txt
          multipass info leftswitch --format json | jq -r '.info.leftswitch.ipv4[0]' >> vm.txt

          #Send the vm.txt to the azure VM (already exists before the pipeline)
          #scp -o StrictHostKeyChecking=no $HOME/vm.txt ubuntu@10.92.171.99:/home/ubuntu/
          #Send the vm.txt to the azure agent container
          #multipass exec azure --  docker cp /home/ubuntu/vm.txt azureagent:/root/
          docker cp /home/ubuntu/vm.txt azureagent:/root/
        readyTimeout: '20000'
        
  
    - script: |
 

        # Setup Environment

        export PATH="$HOME/.local/bin:$PATH"
        . ~/.bashrc
        #git checkout 2nd-summer-school-stable
        echo 'Setting IP@ variables ...'
        
        #Set variables 
        leftclient=$(sed -n '1p' /root/vm.txt)
        rightclient=$(sed -n '2p' /root/vm.txt)
        leftswitch=$(sed -n '3p' /root/vm.txt)
        
        export CORE_MASTER=$(sed -n '1p' /root/vm.txt)
        export CORE_MASTER_IP=$(sed -n '1p' /root/vm.txt)
        export CORE_MASTER_NAME="leftclient"

        export OPENVPN=$(sed -n '1p' /root/vm.txt)
        export OPENVPN_IP=$(sed -n '1p' /root/vm.txt)
        export OPENVPN_NAME="leftclient"

        export HAPROXY=$(sed -n '1p' /root/vm.txt)
        export HAPROXY_IP=$(sed -n '1p' /root/vm.txt)
        export HAPROXY_NAME="leftclient"
        
        export CORE_COMPUTE=$(sed -n '2p' /root/vm.txt)
        export CORE_COMPUTE_IP=$(sed -n '2p' /root/vm.txt)
        export CORE_COMPUTE_NAME="rightclient"

        export RAN_MASTER=$(sed -n '3p' /root/vm.txt)
        export RAN_MASTER_IP=$(sed -n '3p' /root/vm.txt)
        export RAN_MASTER_NAME="leftswitch"

        cd sopnode/ansible

        # Update ansbile RAN hosts
        envsubst < inventories/blueprint/templates/ran/hosts.tpl > inventories/blueprint/ran/hosts
        #        sed -i "s/172\.16\.2\.2/$leftswitch/g" inventories/blueprint/ran/hosts
        sed -i 's/root/ubuntu/g' inventories/blueprint/ran/group_vars/all
        #        sed -i "s/172\.16\.2\.27/$leftswitch/g; s/172\.16\.0\.0\/12/10\.92\.171\.0\/24/g" params.blueprint.ran.yaml 
        cat inventories/blueprint/ran/hosts
        #ansible-playbook -i inventories/blueprint/ran/ k8s-master.yaml --extra-vars "@params.blueprint.ran.yaml"
        #ansible-playbook -i inventories/blueprint/ran/ k8s-node.yaml --extra-vars "@params.blueprint.ran.yaml"


        # Update ansible core hosts
        envsubst < inventories/blueprint/templates/core/hosts.tpl > inventories/blueprint/core/hosts
        sed -i 's/root/ubuntu/g' inventories/blueprint/core/group_vars/all
        #        sed -i "s/172\.16\.2\.26/$leftclient/g; s/172\.16\.0\.0\/12/10\.92\.171\.0\/24/g" params.blueprint.core.yaml
        #        sed -i "s/172\.16\.2\.5/$leftclient/g; s/172\.16\.2\.6/$rightclient/g" inventories/blueprint/core/hosts
        cat inventories/blueprint/core/hosts
        #        #ansible-playbook -i inventories/blueprint/core/ k8s-master.yaml --extra-vars "@params.blueprint.core.yaml"
        #        #ansible-playbook -i inventories/blueprint/core/ k8s-node.yaml --extra-vars "@params.blueprint.core.yaml"

        #Create clusters
        echo 'Creating RAN & core cluster ...'
        ansible-playbook -i inventories/blueprint/core/ k8s-master.yaml --extra-vars "@params.blueprint.core.yaml"  --extra-vars "@params.pipeline.yaml"&
        ansible-playbook -i inventories/blueprint/ran/ k8s-master.yaml --extra-vars "@params.blueprint.ran.yaml"  --extra-vars "@params.pipeline.yaml"
        wait
        ansible-playbook -i inventories/blueprint/ran/ k8s-node.yaml --extra-vars "@params.blueprint.ran.yaml"  --extra-vars "@params.pipeline.yaml" &
        ansible-playbook -i inventories/blueprint/core/ k8s-node.yaml --extra-vars "@params.blueprint.core.yaml"  --extra-vars "@params.pipeline.yaml"
        echo 'Cluster interconnection ...'
        #Cluster interconection
        #Set up openvpn server 192.0.2.1

        sed -i "s/192\.0\.2\.1/${OPENVPN_IP}/g" roles/openvpn/vars/main.yaml

        ansible-playbook  -i inventories/blueprint/core/ openvpn.yaml --extra-vars "@params.blueprint.core.yaml"  --extra-vars "@params.pipeline.yaml"
        
      displayName: 'K8S Clusters Setup'
  
    - task: SSH@0
      displayName: 'Setup ran0 interface'
      continueOnError: true
      inputs:
        sshEndpoint: $(VM_SERVER)
        runOptions: 'commands'
        commands: |
          multipass exec leftswitch -- /bin/bash -c 'sudo ip link add ran0 type veth peer name ran0_0 && sudo ip link set up ran0 && sudo ip link set up ran0_0 && sudo ip addr add 10.0.10.1/24 dev ran0_0'
          multipass exec rightclient -- /bin/bash -c 'sudo ip link add ran0 type veth peer name ran0_0 && sudo ip link set up ran0 && sudo ip link set up ran0_0 && sudo ip addr add 172.22.10.1/24 dev ran0_0'
        readyTimeout: '20000'

    - task: SSH@0
      displayName: 'Set  OpenVPN client in core'
      continueOnError: true
      inputs:
        sshEndpoint: $(VM_SERVER)
        runOptions: 'commands'
        commands: |
           multipass transfer leftclient:/home/ubuntu/core/core.ovpn . 
           multipass transfer core.ovpn rightclient:/home/ubuntu/
           multipass exec rightclient -- nohup sudo openvpn core.ovpn </dev/null >nohup.log 2>&1 &
        readyTimeout: '2000'

    - task: SSH@0
      displayName: 'Set  OpenVPN client in RAN'
      continueOnError: true
      inputs:
        sshEndpoint: $(VM_SERVER)
        runOptions: 'commands'
        commands: |
           multipass transfer leftclient:/home/ubuntu/ran/ran.ovpn . 
           multipass transfer ran.ovpn leftswitch:/home/ubuntu/
           multipass exec leftswitch -- nohup sudo openvpn ran.ovpn </dev/null >nohup.log 2>&1 &
        readyTimeout: '2000'

    - task: SSH@0
      displayName: 'Interconnection test'
      continueOnError: true
      inputs:
        sshEndpoint: $(VM_SERVER)
        runOptions: 'commands'
        commands: |
           multipass exec leftswitch -- ping -c 1 -I 10.0.10.1 172.22.10.1
        readyTimeout: '20000'

    - script: |
        #Setup Environment
        export PATH="$HOME/.local/bin:$PATH"
        . ~/.bashrc
        cd sopnode/ansible
        #Core deployment
        echo 'deploying 5G core ...'
        ansible-playbook  -i inventories/blueprint/core/  5g.yaml  --extra-vars "@params.blueprint.core.yaml" --extra-vars "@params.pipeline.yaml"
      displayName: '5G core deployment'

    - script: |
        # Setup Environment
        export PATH="$HOME/.local/bin:$PATH"
        . ~/.bashrc
        cd sopnode/ansible
        ansible-playbook  -i inventories/blueprint/ran/  5g.yaml  --extra-vars "@params.blueprint.ran.yaml" --extra-vars "@params.pipeline.yaml"
      displayName: 'RAN deployment'
      continueOnError: true

    - script: |
        # Setup Environment
        export PATH="$HOME/.local/bin:$PATH"
        . ~/.bashrc
        cd sopnode/ansible
        kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=oai-nr-ue --timeout=3m --namespace blueprint
        sleep 60
        ansible-playbook  -i inventories/blueprint/ran/  5g_test.yaml  --extra-vars "@params.blueprint.ran.yaml" --extra-vars "@params.pipeline.yaml"
      displayName: 'Test UE connectivity'
      continueOnError: true

    - task: SSH@0
      inputs:
        sshEndpoint: $(VM_SERVER)
        runOptions: 'commands'
        commands: |
          multipass delete --purge leftclient
          multipass delete --purge rightclient
          multipass delete --purge leftswitch
        readyTimeout: '20000'
      displayName: Destroy VMs